nn.real[[1]]
all.equal(nn.real[[1]], nn.approx[[1]])
nn.real
str(nn.real)
str(nn.approx)
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = 100)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
all.equal(nn.real[[1]], nn.approx[[1]])
str(nn.real)
str(nn.approx)
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = k + 1)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(data = input, k = k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
all.equal(nn.real[[1]], nn.approx[[1]])
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "boobs")
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = k + 1)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(data = input, k = k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
stop("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "boobs")
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = k + 1)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(data = input, k = k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
stop("Please enter a boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "TRUE")
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "true")
nn.real$nn.index
nn.real$nn.dist
avg.dist <- apply(nn.real, 1, mean)
nn.real
avg.dist <- apply(nn.real$nn.dist, 1, mean)
avg.dist
hist(avg.dist)
hist(avg.dist, braeks = 100)
hist(avg.dist, breaks = 100)
hist(avg.dist, breaks = 100)
hist(avg.dist, breaks = 200)
hist(avg.dist, breaks = 50)
avg.dist <- apply(nn.real$nn.dist, 1, sd)
hist(avg.dist, breaks = 200)
avg.dist <- apply(nn.real$nn.dist, 1, mean)
devtools::document()
library(Sconify)
rm(fnn)
library(Sconify)
fnn
nn <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
scone <- scone.values(nn.matrix = nn, cell.data = combined, scone.markers = scone.markers, unstim = "basal")
scone
scone <- scone.values(nn.matrix = nn, cell.data = combined, scone.markers = funct.markers, unstim = "basal")
final <- post.processing(scone.output = scone, input = input.markers, cell.data = combined, tsne = TRUE, log.transform.qvalue = TRUE)
final
final$density
hist(final$density)
hist(final$density, breaks = 100)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
library(ggplot2)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
plot(final$wanderlust, final$density)
# New scone testing with wanderlust data
library(ggplot2)
nn <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
scone <- scone.values(nn.matrix = nn, cell.data = combined, scone.markers = funct.markers, unstim = "basal")
final <- post.processing(scone.output = scone, input = input.markers, cell.data = combined, tsne = TRUE, log.transform.qvalue = TRUE)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
plot(final$wanderlust, final$density)
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
basal <- system.file('extdata',
'Bendall et al Cell Sample C_basal.fcs',
package = "Sconify")
basal <- fcs.to.tibble(basal, transform = "asinh")
data.to.fcs(basal, "basal.output.FCS", untransform = TRUE)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
plot(final$wanderlust, final$density)
scone.output
scone
exist
devtools::use_data(nn, overwrite = TRUE)
devtools::use_data(final, overwrite = TRUE)
scone.output <- scone
devtools::use_data(scone, overwrite = TRUE)
nn$nn.dist
nn[[1]]
nn[[1]][1:20, 1:10]
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
# Cell identity is in rows, k-nearest neighbors are columns
# List of 2 includes the cell identity of each nn, and the euclidean distance between
#   itself and the cell of interest
# Indices
str(nn[[1]])
nn[[1]][1:20, 1:10]
# Distance
str(nn[[2]])
nn[[2]][1:20, 1:10]
nn
str(nn)
devtools::document()
library(Sconify)
scone.output
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
scone.output
scone.output[,34]
scone.outpu
scone.output
library(Sconify)
scone.output
scone.output
final
scone
scone.output <- scone
devtools::use_data(scone.output, overwrite = TRUE)
devtools::document()
library(Sconify)
scone.output
scone.output
devtools::use_data(scone.output, overwrite = TRUE)
library(Sconify)
library(tidyverse)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/scone/gabi.surgery.stims/fcs")
files <- list.files() %>% .[grep("fcs", .)]
basal <- files[grep("BL", files)]
lps <- files[grep("LPS", files)]
il6 <- files[grep("IL6", files)]
total.files <- c(basal, lps, il6)
markers <- read_csv("organized.markers.csv")
md.input <- markers$input
md.scone <- markers$scone %>% .[!is.na(.)]
set.seed(10218)
md <- process.multiple.files(total.files,
numcells = 20000,
scale = TRUE,
input = md.input,
name.multiple.donors = TRUE)
md.nn <- fnn(cell.df = md, input.markers = md.input, k = 200)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
md.final <- post.processing(scone.output = md.scone.output,
cell.data = md,
input = md.input,
tsne = TRUE,
log.transform.qvalue = TRUE)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
document()
devtools::document()
setwd("~/Documents/local.R.projects/Sconify")
devtools::document()
library(Sconify)
md.nn <- fnn(cell.df = md, input.markers = md.input, k = 200)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
md.final <- post.processing(scone.output = md.scone.output,
cell.data = md,
input = md.input,
tsne = TRUE,
log.transform.qvalue = TRUE)
devtools::use_data(md.nn, overwrite = TRUE)
devtools::use_data(md.scone.output, overwrite = TRUE)
devtools::use_data(md.final, overwrite = TRUE)
md.scone.output
devtools::document()
library(Sconify)
test <- impute.testing(k.titration, combined, input.markers, funct.markers, approx = TRUE)
devtools::document()
library(Sconify)
test <- impute.testing(k.titration, combined, input.markers, funct.markers, approx = TRUE)
test
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Scono)
library(Sconify)
final
final$density
qplot(final$density, final$`TdT(Dy163)Di`)
qplot(final$density, final$`TdT(Dy163)Di`)
library(ggplot2)
qplot(final$density, final$`TdT(Dy163)Di`)
make.knn.list <- function(cell.data, nn.matrix) {
# Unpack the KNN output
nn.index <- nn.matrix[[1]]
nn.dist <- nn.matrix[[2]]
# KNN-DE
mean.dist <- apply(nn.dist, 1, mean)
density <- 1/mean.dist
# The list
knn.list <- lapply(1:nrow(nn.index), function(i) {
cell.data[nn.index[i,],]
})
return(list(density = density, knn.list = knn.list))
}
nn
library(Sconify)
nn
nn$nn.index
nn$nn.dist
test <- make.knn.list(cell.data = combined, nn.matrix = nn)
test
test[[1]]
test[[1]]
str(test[[1]])
test[[2]]
nn.index
nn$nn.index
combined[nn$nn.index[1,],]
proc.time(make.knn.list(cell.data = combined, nn.matrix = nn))
test <- proc.time(make.knn.list(cell.data = combined, nn.matrix = nn))
make.knn.list(cell.data = combined, nn.matrix = nn)
before <- Sys.time()
test <- make.knn.list(cell.data = combined, nn.matrix = nn)
after <- Sys.time()
time <- after - before
time
devtools::document
devtools::document()
library(Sconify)
rm(make.knn.list)
make.knn.list()
library(Sconify)
make.knn.lust
make.knn.lust
make.knn.list
nn
devtools::document()
library(Sconify)
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
knn.list
str(knn.list)
str(knn.list$knn.list)
length(knn.list$knn.list)
length(knn.list$density
)
devtools::use_data(knn.list)
str(knn.list$density)
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
# The KNN-de
str(knn.list$density)
# The KNN list, element example
knn.list$knn.list[[1]]
devtools::document()
markers
# How to convert your excel sheet into vector of static and functional markers
markers
library(Sconify)
get.knn.de <- function(nn.matrix) {
# Distances
nn.dist <- nn.matrix[[2]]
# KNN-DE
mean.dist <- apply(nn.dist, 1, mean)
density <- 1/mean.dist
return(density)
}
test <- get.knn.de(nn)
test
test == knn.list$density
all.equal(test knn.list$density)
all.equal(test, knn.list$density)
devtools::document()
library(Sconify)
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
devtools::use_data(knn.list, overwrite = TRUE)
knn.density <- get.knn.de(nn)
devtools::use_data(knn.density)
knn.density
knn.list
knn.list[[1]]
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Sconify)
final
final$density
hist(final$density)
hist(final$density, breaks = 100)
sd(final$density)
sd(1/final$density)
hist(1/final$density, breaks = 100)
sd(1/final$density)
subsample.and.tsne <- function(dat, input, numcells) {
dat <- dat[sample(nrow(dat), numcells),]
print(dat)
return(result)
}
library(Sconify)
test <- subsample.and.tsne(final, input, 1000)
final
subsample.and.tsne <- function(dat, input, numcells) {
dat <- dat[sample(nrow(dat), numcells),]
dat <- add.tsne(dat, input)
return(dat)
}
test <- subsample.and.tsne(final, input, 1000)
add.tsne <- function(dat, input) {
result <- Rtsne(X = dat[,input],
dims = 2,
pca = FALSE,
verbose = TRUE)$Y %>%
as.tibble
names(result) <- c("bh-SNE1", "bh-SNE2")
result <- bind_cols(dat, result)
return(result)
}
test <- subsample.and.tsne(final, input, 1000)
library(tidyverse)
test <- subsample.and.tsne(final, input, 1000)
library(Rtsne)
test <- subsample.and.tsne(final, input, 1000)
input
final
test <- subsample.and.tsne(final, input.markers, 1000)
test
devtools::document()
library(Sconify)
test <- subsample.and.tsne(final, input.markers, 1000)
test <- subsample.and.tsne(final, input.markers, 1000)
final
final.sub <- subsample.and.tsne(dat = final, input = input.markers, numcells = 2000)
devtools::use_data(final.sub)
devtools::document()
library(Sconify)
test <- 1:10
test
1/test
hist(test)
hist(1/test)
hist(1/(test^2))
hist(1/(test^(1/2)))
sqrt(4)
install.packages("SphericalCubature")
library(SphericalCubature)
ballVolume(3, R = 1)
ballVolume(2, R = 1)
ballVolume(100, R = 1)
ballVolume(20, R = 1)
ballVolume(4, R = 1)
ballVolume(5, R = 1)
input.markers
length(input.markers)
ballVolume(27, R = 1)
dist <- 1/final$density
dist <- sapply(dist, function(x) {
ballVolume(length(input.markers), x)
})
dist
dist <- 1/final$density
dens <- sapply(dist, function(x) {
ballVolume(length(input.markers), x)
})
hist(dist)
hist(dens)
hist(dens, breaks = 100)
ballVolume(26, R = 1)
dens <- sapply(dist, function(x) {
1/(dist^27)
})
hist(dens)
test <- Rtsne(X = final[,input][1:2000], dims = 2, perplexity = 500)
test <- Rtsne(X = final[,input.markers][1:2000], dims = 2, perplexity = 500)
test <- Rtsne(X = final[,input.markers][1:2000], dims = 2, perplexity = 500)
final[,input.markers]
test <- Rtsne(X = final[,input.markers][1:2000,], dims = 2, perplexity = 500)
ln2
log2
?log
log(2)
log(2.71)
log(1:10)
plot(log(1:100))
log(1000000)
log(10000)
log(100000000000000000)
log(inf)
log(Inf)
1/Inf
knn.list[[1]]
knn.list[1:2]
knn.list[1:10]
knn.list <- knn.list[1:10]
use_data(knn.list, overwrite = TRUE)
devtools::use_data(knn.list, overwrite = TRUE)
document()
devtools::document()
library(Sconify)
load("~/Documents/local.R.projects/Sconify/.RData")
load("~/Documents/local.R.projects/Sconify/.RData")
devtools::document()
library(Sconify)
devtools::document()
devtools::document()
nn
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)[1:100]
knn.list
rm knn.list
rm(knn.list)
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
str(knn.list)
str(knn.list[[1]])
str(knn.list[[2]])
make.knn.list
devtools::document()
library(Sconify)
make.knn.list
knn.list <- make.knn.list(cell.data = combined, nn.matrix = )
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
knn.list[1:2]
knn.list <- knn.list[1:10]
devtools::use_data(knn.list)
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Sconify)
