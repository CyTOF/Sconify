test.edit <- marker.edit(test)
marker.edit <- function(file) {
cells <- fcs.to.tibble(file)
markers <- colnames(cells)
result <- list(input = colnames(cells), functional = c())
result <- vi(result)
return(list(surface = result[[1]], functional = result[[2]]))
}
files <- list.files()
test <- files[1]
test.edit <- marker.edit(test)
?edit.default
marker.edit <- function(file) {
cells <- fcs.to.tibble(file)
markers <- colnames(cells)
result <- tibble(input = colnames(cells), functional = c())
result <- vi(result)
return(list(surface = result[[1]], functional = result[[2]]))
}
files <- list.files()
test <- files[1]
test.edit <- marker.edit(test)
marker.edit <- function(file) {
cells <- fcs.to.tibble(file)
markers <- colnames(cells)
result <- tibble(input = colnames(cells), functional = NULL)
result <- vi(result)
return(list(surface = result[[1]], functional = result[[2]]))
}
files <- list.files()
test <- files[1]
test.edit <- marker.edit(test)
marker.edit <- function(file) {
cells <- fcs.to.tibble(file)
markers <- colnames(cells)
result <- tibble(input = colnames(cells), functional = "")
result <- vi(result)
return(list(surface = result[[1]], functional = result[[2]]))
}
files <- list.files()
test <- files[1]
test.edit <- marker.edit(test)
test.edit
test.edit[[2]]
test.edit[[1]]
test.edit[[2]]
test.edit[[2]][1]
test.edit[[2]][2]
devtools::document()
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
# Example fcs file
basal <- system.file('extdata',
'Bendall_et_al_Cell_Sample_C_basal.fcs',
package = "Sconify")
# Run this, and check your directory for "markers.csv"
markers <- get.marker.names(basal)
markers
# Example fcs file
basal <- system.file('extdata',
'Bendall_et_al_Cell_Sample_C_basal.fcs',
package = "Sconify")
# Run this, and check your directory for "markers.csv"
markers <- get.marker.names(basal)
markers
library(Sconify)
devtools::test()
wand.ideal.k
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
wand.final <- post.processing(scone.output = wand.scone,
cell.data = combined,
input = input.markers)
wand.final <- post.processing(scone.output = wand.scone,
cell.data = combined,
input = input.markers)
wand.final <- post.processing(scone.output = wand.scone,
cell.data = wand.combined,
input = input.markers)
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
wand.scone <- scone.values(nn.matrix = wand.nn,
cell.data = combined,
scone.markers = funct.markers,
unstim = "basal")
wand.scone <- scone.values(nn.matrix = wand.nn,
cell.data = wand.combined,
scone.markers = funct.markers,
unstim = "basal")
wand.nn
library(Sconify)
wand.nn
devtools::document()
library(Sconify)
devtools::test()
devtools::test()
devtools::document()
library(Sconify)
devtools::test()
devtools::document()
library(Sconify)
devtools::test()
devtools::document()
library(Sconify)
library(Sconify)
devtools::test()
test.mat <- cbind(1:10, 2:11, 3:12)
test.mat <- cbind(1:10, 2:11, 3:12)
vapply(1:col(test.mat), function(i) {
i + 1
}, FUN.VALUE = double(1))
vapply(1:ncol(test.mat), function(i) {
i + 1
}, FUN.VALUE = double(1))
vapply(1:ncol(test.mat), function(i) {
i + 1
}, FUN.VALUE = double(12))
vapply(1:ncol(test.mat), function(i) {
i[1] + 1
}, FUN.VALUE = double(1))
?seq_along
vapply(seq_along(ncol(test.mat)), function(i) {
i[1] + 1
}, FUN.VALUE = double(1))
vapply(seq_len(ncol(test.mat)), function(i) {
i[1] + 1
}, FUN.VALUE = double(1))
seq_along(1:10)
seq_len(1:10)
seq_len(10)
devtools::test()
devtools::test()
devtools::test()
devtools::document()
devtools::document()
library(Sconify)
library(Sconify)
devtools::document()
library(Sconify)
BiocCheck::BiocCheck(getwd())
BiocCheck::BiocCheck(getwd())
library(Sconify)
BiocCheck::BiocCheck(getwd())
devtools::document()
BiocCheck::BiocCheck(getwd())
dir()
setwd("~/Documents/local.projects/KNN/Scone/code/Sconify")
BiocCheck::BiocCheck(getwd())
devtools::document()
library(Sconify)
BiocCheck::BiocCheck(getwd())
BiocCheck::BiocCheck(getwd())
BiocCheck::BiocCheck(getwd())
BiocCheck::BiocCheck(getwd())
BiocCheck::BiocCheck(getwd())
library(Sconify)
BiocCheck::BiocCheck(getwd())
devtools::document()
devtools::test()
devtools::test()
devtools::test()
test_that("Markers csv file is successfully imported", {
markers <- ParseMarkers(markers.file)
expect_equal(length(markers), 2)
expect_equal(length(markers[[1]]), 27)
expect_equal(length(markers[[2]]), 16)
expect_equal(names(markers), c("input", "functional"))
expect_true(is.list(markers))
})
test_that("Fcs file gets converted into a tibble data structure", {
dat <- FcsToTibble(file = basal.file)
expect_true(is.tibble(dat))
expect_true(is.data.frame(dat))
expect_false(is.matrix(dat))
expect_true(is.atomic(dat[[1]]))
})
basal.file <- system.file('extdata',
'Bendall_et_al_Cell_Sample_C_basal.fcs',
package = "Sconify")
stim.file <- system.file('extdata',
'Bendall_et_al_Cell_Sample_C_IL7.fcs',
package = "Sconify")
markers.file <- system.file('extdata',
'markers.csv',
package = "Sconify")
input <- ParseMarkers(markers.file)[[1]]
test_that("Markers csv file is successfully imported", {
markers <- ParseMarkers(markers.file)
expect_equal(length(markers), 2)
expect_equal(length(markers[[1]]), 27)
expect_equal(length(markers[[2]]), 16)
expect_equal(names(markers), c("input", "functional"))
expect_true(is.list(markers))
})
test_that("Fcs file gets converted into a tibble data structure", {
dat <- FcsToTibble(file = basal.file)
expect_true(is.tibble(dat))
expect_true(is.data.frame(dat))
expect_false(is.matrix(dat))
expect_true(is.atomic(dat[[1]]))
})
library(Sconify)
library(testthat)
library(magrittr)
library(tibble)
context("Test the file processing arm of the Sconify package")
basal.file <- system.file('extdata',
'Bendall_et_al_Cell_Sample_C_basal.fcs',
package = "Sconify")
stim.file <- system.file('extdata',
'Bendall_et_al_Cell_Sample_C_IL7.fcs',
package = "Sconify")
markers.file <- system.file('extdata',
'markers.csv',
package = "Sconify")
input <- ParseMarkers(markers.file)[[1]]
test_that("Markers csv file is successfully imported", {
markers <- ParseMarkers(markers.file)
expect_equal(length(markers), 2)
expect_equal(length(markers[[1]]), 27)
expect_equal(length(markers[[2]]), 16)
expect_equal(names(markers), c("input", "functional"))
expect_true(is.list(markers))
})
test_that("Fcs file gets converted into a tibble data structure", {
dat <- FcsToTibble(file = basal.file)
expect_true(is.tibble(dat))
expect_true(is.data.frame(dat))
expect_false(is.matrix(dat))
expect_true(is.atomic(dat[[1]]))
})
test_that("The asinh transform command works", {
not.tr <- FcsToTibble(file = basal.file, transform = "none")
tr <- FcsToTibble(file = basal.file)
tr2 <- FcsToTibble(file = basal.file, transform = "asinh")
expect_equal(tr[[3]], asinh(not.tr[[3]]/5))
expect_equal(tr[[3]], tr2[[3]])
})
test_that("Processing multiple files works on a single file", {
dat1 <- FcsToTibble(file = basal.file)
dat2 <- ProcessMultipleFiles(files = basal.file, input = input)
expect_equal(dat1[,input], dat2[,input])
expect_equal(length(dat1) + 1, length(dat2))
expect_equal(length(unique(dat2[["condition"]])), 1)
})
test_that("Process multiple files effectively sub-samples", {
cell.number <- nrow(FcsToTibble(basal.file))
testing <- c(cell.number,
cell.number %/% 2,
cell.number %/% 4,
cell.number %/% 8)
lapply(testing, function(i) {
curr <- ProcessMultipleFiles(files = basal.file, numcells = i,
input = input)
expect_equal(nrow(curr), i)
})
expect_error(ProcessMultipleFiles(files = basal.file, numcells = 0,
input = input))
expect_error(ProcessMultipleFiles(files = basal.file, numcells = -3,
input = input))
expect_error(ProcessMultipleFiles(files = basal.file, numcells = 10.76,
input = input))
expect_error(ProcessMultipleFiles(files = c(basal.file, stim.file),
numcells = 1,
input = input))
})
test_that("ProcessMultipleFiles divdes contribution of each file equally", {
testing <- c(100, 99, 2)
lapply(testing, function(i) {
dat <- ProcessMultipleFiles(files = basal.file, numcells = 99,
input = input)
cond.dat <- dat[["condition"]]
conds <- unique(cond.dat)
cond1 <- cond.dat[cond.dat == conds[1]]
cond2 <- cond.dat[cond.dat == conds[2]]
expect_equal(length(cond1), length(cond2))
})
})
test_that("Quantile normalization only happens with two or more files", {
expect_error(process.multiple.files(basal.file,
input = input,
norm = TRUE))
})
test_that("Simple quantile normalization case", {
dat <- list(tibble(v1 = 1:10), tibble(v1 = 11:20))
q.dat <- QuantNormalizeElements(dat)
expect_equal(q.dat[[1]], q.dat[[2]])
dat <- list(tibble(v1 = 1:5), tibble(v2 = 2, 4, 6, 8, 10))
q.dat <- QuantNormalizeElements(dat)
expect_equal(q.dat[[1]], q.dat[[2]])
dat <- list(tibble(v1 = c(1, 3, 5, 7)), tibble(v2 = c(2, 4, 6, 8)))
q.dat <- QuantNormalizeElements(dat)
expect_equal(q.dat[[1]], q.dat[[2]])
})
test_that("Split file returns two conditions", {
dat <- SplitFile(basal.file, numcells = 10000, input.markers = input)
expect_equal(length(unique(dat$condition)), 2)
})
test_that("Split file can only be run on a single file", {
expect_error(SplitFile(c(basal.file, stim.file),
numcells = 10000,
input.markers = input))
})
test_that("Split file handles an odd number of cells", {
dat <- SplitFile(basal.file, numcells = 99, input.markers = input)
expect_equal(nrow(dat), 98)
})
library(testthat)
library(Sconify)
context("Test the knn and statistics arm of the sconify package")
k <- 50
test.nn <- Fnn(wand.combined, input.markers = input.markers, k = k)
test.scone <- SconeValues(nn.matrix = test.nn,
cell.data = wand.combined,
scone.markers = funct.markers,
unstim = "basal")
test_that("fnn function produces a list of two", {
expect_equal(length(test.nn), 2)
})
test_that("fnn produces a matrix[n rows, k columns]", {
tmp <- test.nn[[1]]
expect_equal(ncol(tmp), k)
expect_equal(nrow(tmp), nrow(wand.combined))
})
test_that("fnn does not work when there is no input markers", {
expect_error(Fnn(wand.combined, input.markers = c("hi"), k = k))
expect_error(Fnn(wand.combined, input.markers = c(), k = k))
expect_error(Fnn(wand.combined, input.markers = c("CD3"), k = k))
})
test_that("fnn does not work with some k values", {
expect_error(Fnn(wand.combined, input.markers = input.markers, k = 0))
expect_error(Fnn(wand.combined, input.markers = input.markers, k = -3))
})
test_that("knn density estimation is produced", {
tmp <- GetKnnDe(test.nn)
expect_equal(length(tmp), nrow(wand.combined))
expect_true(all(tmp > 0))
})
test_that("knn density estimation requires the list of two from fnn output", {
expect_error(GetKnnDe(test.nn[[1]]))
expect_error(GetKnnDe(test.nn[[2]]))
})
test_that("knn list is created for each cell", {
tmp <- MakeKnnList(wand.combined, test.nn)
expect_equal(length(tmp), nrow(wand.combined))
expect_true(all(colnames(tmp[[1]]) == colnames(wand.combined)))
expect_equal(nrow(tmp[[1]]), k)
})
test_that("Scone values outputs a tibble of statistical values", {
expect_equal(ncol(test.scone), 2*length(funct.markers) + 2)
})
test_that("Scone values produces a proper knn density estimation", {
expect_true(all(test.scone$density == GetKnnDe(test.nn)))
})
test_that("Scone produces a proper readout of differential abundance", {
expect_false(all(test.scone$IL7.fraction.cond.2 > 1))
})
test_that("Scone wont perform statistics unless a proper test name is used", {
expect_error(SconeValues(nn.matrix = test.nn,
scone.markers = funct.markers,
unstim = "basal",
stat.test = "tyler's test"))
})
test_that("Scone wont perform statistics unless a proper basal name is used", {
expect_error(SconeValues(nn.matrix = test.nn,
scone.markers = funct.markers,
unstim = "bas"))
})
test_that("Scone produces FDR adjusted q-values", {
expect_true(all(test.scone$`Ki67(Sm152)Di.IL7.qvalue` <= 1))
expect_false(all(test.scone$`Ki67(Sm152)Di.IL7.qvalue` < 1)) # p.adjust
})
test_that("Scone produces fold q thresholded fold changes", {
tmp1 <- test.scone$`pSTAT5(Nd150)Di.IL7.qvalue` # 1.0
tmp2 <- test.scone$`pSTAT5(Nd150)Di.IL7.change`
expect_equal(which(tmp1 < 0.05), which(tmp2 > 0))
})
test_that("Scone does multiple donor stats only with donors", {
expect_error(SconeValues(nn.matrix = test.nn,
cell.data = wand.combined,
scone.markers = funct.markers,
unstim = "basal",
multiple.donor.compare = TRUE))
})
test_that("Scone values output q values and fold changes", {
test.qvalue <- colnames(test.scone)[grep("qvalue", colnames(test.scone))]
test.change <- colnames(test.scone)[grep("change", colnames(test.scone))]
expect_equal(length(test.qvalue), length(funct.markers))
expect_equal(length(test.change), length(funct.markers))
})
library(Sconify)
library(testthat)
context("Testing the functionality of the ideal k finder")
k.titration <- c(5, 50, 500)
test <- ImputeTesting(k.titration = k.titration,
cells = wand.il7,
input.markers = input.markers,
test.markers = funct.markers)
test_that("High-level desired output from the impute testing function", {
expect_equal(length(test), length(k.titration))
})
test_that("Convex loss function expected", {
expect_true(test[1] > test[2])
expect_true(test[2] < test[3])
})
test_that("Edge case for improper k selection", {
expect_error(ImputeTesting(k.titration = c(-4),
cells = wand.il7,
input.markers = input.markers,
test.markers = funct.markers))
})
library(testthat)
library(Sconify)
context("Test the post processing functions for the Sconify package")
test_that("Subsampling and tSNE functionality works", {
test.tsne <- SubsampleAndTsne(wand.combined, input.markers, 100)
expect_equal(ncol(test.tsne), ncol(wand.combined) + 2)
expect_equal(length(grep("bh-SNE", colnames(test.tsne))), 2)
})
test_that("String to numbers works", {
test.str <- StringToNumbers(c("hi", "hi", "bye", "hi"))
expect_equal(test.str, c(1, 1, 2, 1))
})
test_that("Basic post-processing functionality", {
test.pp <- PostProcessing(scone.output = wand.scone,
cell.data = wand.combined,
input = input.markers,
tsne = TRUE,
log.transform.qvalue = TRUE)
expect_equal(ncol(test.pp), ncol(wand.final))
})
test_that("Log transforming q values works", {
test.pp <- PostProcessing(scone.output = wand.scone,
cell.data = wand.combined,
input = input.markers,
tsne = FALSE,
log.transform.qvalue = FALSE)
q <- test.pp[grep("qvalue", names(test.pp))]
expect_true(all(q <= 1))
test.ppq <- PostProcessing(scone.output = wand.scone,
cell.data = wand.combined,
input = input.markers,
tsne = FALSE,
log.transform.qvalue = TRUE)
expect_false(all(test.pp == test.ppq))
expect_true(max(test.ppq) > 1)
})
test_that("Edge cases for the tSNE vis function", {
expect_error(TsneVis(final = wand.final, marker = "test", label = "test"))
})
test_that("Testing the output of the tSNE vis function", {
expect_type(TsneVis(final = wand.final,
marker = "pSTAT5(Nd150)Di.IL7.change",
label = "test"),
"list")
})
test_that("Testing the output of the make.hist function", {
expect_type(MakeHist(wand.final,
100,
"IL7.fraction.cond.2",
"fraction IL7"),
"list")
})
devtools::document()
devtools::test()
devtools::test(
)
devtools::test()
?vapply
devtools::test()
devtools::test()
devtools::test()
sapply(1:10, print)
lapply(1:10, print) %>% unlist
devtools::document()
BioCheck::biocheck
library(BiocCheck)
BiocCheck(getwd())
BiocCheck(getwd())
QuantNormalizeElements(wand.combined[wand.combined$condition == "basal",], wand.combined[wand.combined$condition == "il7",])
QuantNormalizeElements(list(wand.combined[wand.combined$condition == "basal",], wand.combined[wand.combined$condition == "il7",]))
wand.combined$condition
QuantNormalizeElements(list(wand.combined[wand.combined$condition == "basal",], wand.combined[wand.combined$condition == "IL7",]))
warnings()
basal <- wand.combined[wand.combined$condition == "basal",][,1:10]
il7 <- wand.combined[wand.combined$condition == "il7",][,1:10]
QuantNormalizeElements(list(basal, il7))
il7 <- wand.combined[wand.combined$condition == "IL7",][,1:10]
QuantNormalizeElements(list(basal, il7))
Fnn
devtools::test()
BiocCheck(getwd())
devtools::document()
BiocCheck(getwd())
file <- System.file("extdata", "markers.csv")
file <- system.file("extdata", "markers.csv")
ParseMarkers(file)
file
file <- system.file("extdata", "markers.csv", package = "Sconify")
file
ParseMarkers(file)
devtools::document()
library(Sconify)
browseVignettes(Sconify)
browseVignettes(package = "Sconify")
devtools::install_github("tjburns08/Sconify")
?install_github
devtools::install_github("tjburns08/Sconify")
browseVignettes("Sconify")
devtools::install_github("tjburns08/Sconify", build_vignettes = TRUE)
devtools::install_github("tjburns08/Sconify", build_vignettes = TRUE, force = TRUE)
library(Sconify)
browseVignettes("dplyr")
browseVignettes("Sconify")
