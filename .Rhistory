library(Sconify)
test <- impute.testing(k.titration, combined, input.markers, funct.markers, approx = TRUE)
devtools::document()
library(Sconify)
test <- impute.testing(k.titration, combined, input.markers, funct.markers, approx = TRUE)
test
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Scono)
library(Sconify)
final
final$density
qplot(final$density, final$`TdT(Dy163)Di`)
qplot(final$density, final$`TdT(Dy163)Di`)
library(ggplot2)
qplot(final$density, final$`TdT(Dy163)Di`)
make.knn.list <- function(cell.data, nn.matrix) {
# Unpack the KNN output
nn.index <- nn.matrix[[1]]
nn.dist <- nn.matrix[[2]]
# KNN-DE
mean.dist <- apply(nn.dist, 1, mean)
density <- 1/mean.dist
# The list
knn.list <- lapply(1:nrow(nn.index), function(i) {
cell.data[nn.index[i,],]
})
return(list(density = density, knn.list = knn.list))
}
nn
library(Sconify)
nn
nn$nn.index
nn$nn.dist
test <- make.knn.list(cell.data = combined, nn.matrix = nn)
test
test[[1]]
test[[1]]
str(test[[1]])
test[[2]]
nn.index
nn$nn.index
combined[nn$nn.index[1,],]
proc.time(make.knn.list(cell.data = combined, nn.matrix = nn))
test <- proc.time(make.knn.list(cell.data = combined, nn.matrix = nn))
make.knn.list(cell.data = combined, nn.matrix = nn)
before <- Sys.time()
test <- make.knn.list(cell.data = combined, nn.matrix = nn)
after <- Sys.time()
time <- after - before
time
devtools::document
devtools::document()
library(Sconify)
rm(make.knn.list)
make.knn.list()
library(Sconify)
make.knn.lust
make.knn.lust
make.knn.list
nn
devtools::document()
library(Sconify)
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
knn.list
str(knn.list)
str(knn.list$knn.list)
length(knn.list$knn.list)
length(knn.list$density
)
devtools::use_data(knn.list)
str(knn.list$density)
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
# The KNN-de
str(knn.list$density)
# The KNN list, element example
knn.list$knn.list[[1]]
devtools::document()
markers
# How to convert your excel sheet into vector of static and functional markers
markers
library(Sconify)
get.knn.de <- function(nn.matrix) {
# Distances
nn.dist <- nn.matrix[[2]]
# KNN-DE
mean.dist <- apply(nn.dist, 1, mean)
density <- 1/mean.dist
return(density)
}
test <- get.knn.de(nn)
test
test == knn.list$density
all.equal(test knn.list$density)
all.equal(test, knn.list$density)
devtools::document()
library(Sconify)
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
devtools::use_data(knn.list, overwrite = TRUE)
knn.density <- get.knn.de(nn)
devtools::use_data(knn.density)
knn.density
knn.list
knn.list[[1]]
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Sconify)
final
final$density
hist(final$density)
hist(final$density, breaks = 100)
sd(final$density)
sd(1/final$density)
hist(1/final$density, breaks = 100)
sd(1/final$density)
subsample.and.tsne <- function(dat, input, numcells) {
dat <- dat[sample(nrow(dat), numcells),]
print(dat)
return(result)
}
library(Sconify)
test <- subsample.and.tsne(final, input, 1000)
final
subsample.and.tsne <- function(dat, input, numcells) {
dat <- dat[sample(nrow(dat), numcells),]
dat <- add.tsne(dat, input)
return(dat)
}
test <- subsample.and.tsne(final, input, 1000)
add.tsne <- function(dat, input) {
result <- Rtsne(X = dat[,input],
dims = 2,
pca = FALSE,
verbose = TRUE)$Y %>%
as.tibble
names(result) <- c("bh-SNE1", "bh-SNE2")
result <- bind_cols(dat, result)
return(result)
}
test <- subsample.and.tsne(final, input, 1000)
library(tidyverse)
test <- subsample.and.tsne(final, input, 1000)
library(Rtsne)
test <- subsample.and.tsne(final, input, 1000)
input
final
test <- subsample.and.tsne(final, input.markers, 1000)
test
devtools::document()
library(Sconify)
test <- subsample.and.tsne(final, input.markers, 1000)
test <- subsample.and.tsne(final, input.markers, 1000)
final
final.sub <- subsample.and.tsne(dat = final, input = input.markers, numcells = 2000)
devtools::use_data(final.sub)
devtools::document()
library(Sconify)
test <- 1:10
test
1/test
hist(test)
hist(1/test)
hist(1/(test^2))
hist(1/(test^(1/2)))
sqrt(4)
install.packages("SphericalCubature")
library(SphericalCubature)
ballVolume(3, R = 1)
ballVolume(2, R = 1)
ballVolume(100, R = 1)
ballVolume(20, R = 1)
ballVolume(4, R = 1)
ballVolume(5, R = 1)
input.markers
length(input.markers)
ballVolume(27, R = 1)
dist <- 1/final$density
dist <- sapply(dist, function(x) {
ballVolume(length(input.markers), x)
})
dist
dist <- 1/final$density
dens <- sapply(dist, function(x) {
ballVolume(length(input.markers), x)
})
hist(dist)
hist(dens)
hist(dens, breaks = 100)
ballVolume(26, R = 1)
dens <- sapply(dist, function(x) {
1/(dist^27)
})
hist(dens)
test <- Rtsne(X = final[,input][1:2000], dims = 2, perplexity = 500)
test <- Rtsne(X = final[,input.markers][1:2000], dims = 2, perplexity = 500)
test <- Rtsne(X = final[,input.markers][1:2000], dims = 2, perplexity = 500)
final[,input.markers]
test <- Rtsne(X = final[,input.markers][1:2000,], dims = 2, perplexity = 500)
ln2
log2
?log
log(2)
log(2.71)
log(1:10)
plot(log(1:100))
log(1000000)
log(10000)
log(100000000000000000)
log(inf)
log(Inf)
1/Inf
knn.list[[1]]
knn.list[1:2]
knn.list[1:10]
knn.list <- knn.list[1:10]
use_data(knn.list, overwrite = TRUE)
devtools::use_data(knn.list, overwrite = TRUE)
document()
devtools::document()
library(Sconify)
load("~/Documents/local.R.projects/Sconify/.RData")
load("~/Documents/local.R.projects/Sconify/.RData")
devtools::document()
library(Sconify)
devtools::document()
devtools::document()
nn
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)[1:100]
knn.list
rm knn.list
rm(knn.list)
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
str(knn.list)
str(knn.list[[1]])
str(knn.list[[2]])
make.knn.list
devtools::document()
library(Sconify)
make.knn.list
knn.list <- make.knn.list(cell.data = combined, nn.matrix = )
knn.list <- make.knn.list(cell.data = combined, nn.matrix = nn)
knn.list[1:2]
knn.list <- knn.list[1:10]
devtools::use_data(knn.list)
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Sconify)
devtools::document()
library(Sconify)
devtools::document()
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
fnn
test <- "hi here is
a newline"
test
test
Regex.Replace(test, @"\s+", " ")
Regex.Replace(test, @"\s+", " ")
Regex.Replace(test, "\s+", " ")
Regex.Replace(test, "@", " ")
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
devtools::document()
R CMD Biocheck
library(Sconify)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(Sconify)
devtools::document()
library(devtools)
document()
document()
document()
document()
docuemnt()
document()
document()
library(Sconify)
library(Sconify)
document()
library(Sconify)
document()
library(Sconify)
document()
document()
library(Sconify)
document()
document()
document()
document()
document()
input
library(Sconify)
input
surface
input.markers
document()
funct.markers
document()
document()
document()
document()
document()
document()
library(Sconify)
install.packages("babynames")
library(babynames)
?babynames
babynames
data(babynames)
babynames
size(babynames)
View(babynames)
object.size(babynames)
object.size(babynames)/1024
object.size(babynames)/1000000
object.size(babynames, units = "Mb")
object.size(babynames, units = "mb")
object.size(babynames, units = "legacy")
object.size(babynames)/(1024^2)
data(births)
births
devtools::checkRdaFiles()
tools::checkRdaFiles()
?tools::checkRdaFiles()
dir
dir()
library(BiocCheck)
?BiocCheck
BiocCheck::BiocCheck(Sconify)
BiocCheck::BiocCheck("Sconify")
R CMD BiocCheck package
BiocCheck(dir)
dir
BiocCheck(dir())
devtools::check(dir())
BiocCheck(getwd())
nn
library(Sconify)
basal.data
basal.data$condition
document()
devtools::document()
devtools::document(
)
library(Sconify)
bz.gmcsf.final.norm.scale
devtools::document(
)
combined
combined$condition
combined$condition %>% unique()
library(tidyverse)
combined$condition %>% unique()
bz.gmcsf.final
combined
exist
devtools::document()
final
final.sub
final.sub$`bh-SNE1`
final.sub$`bh-SNE11`
devtools::document()
ideal.k
document()
devtools::document()
il7.data
input.markers
k.titration
devtools::document()
devtools::document()
k.titration
devtools::document()
knn.density
knn.list[[1]]
markers
devtools::document()
md.final
md.input
md.nn
str(md.nn)
devtools::document()
md
unique(md$condition)
unique(md$donor)
md.scone.output
md.scone
devtools::document
devtools::document()
nn
md.nn
str(nn)
scone.output
devtools::document()
library(Sconify)
devtools::documnet()
devtools::document()
library(Sconify)
library(BiocCheck)
?BiocCheck
setwd("~/Documents/local.R.projects/Sconify")
BiocCheck(dir())
dir()
?BiocCheck
packageDir <- system.file("testpackages", "testpkg0", package="BiocCheck")
BiocCheck(packageDir)
packageDir
ls
ls()
dir()
devtools::check()
BiocCheck()
?check
check("Sconify")
devtools::check("Sconify")
ls
ls()
dir()
setwd("~/Documents/local.R.projects/Sconify")
ls()
die()
dir()
devtools::check(dir())
dir()
getwd()
BiocCheck(getwd())
BiocCheck(getwd())
source("https://bioconductor.org/biocLite.R")
biocLite("biocViews")
biocLite("biocViews")
BiocCheck(getwd())
test <- BiocCheck(getwd())
test
test$error
devtools::documnet()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
sample(10, 1:10)
sample(1:10, 1:10)
sample(1:10, 4)
ex.cells <- combined[sample(1:nrow(combined), 1000),]
ex.nn <- fnn(ex.cells, input.markers)
scone.values(ex.nn, ex.cells, funct.markers, "basal")
BiocCheck(getwd())
devtools::document()
BiocCheck(getwd())
subsample.and.tsne(combined, input.markers, 1000)
#' post.processing(scone.output, combined, input.markers, tsne = FALSE)
post.processing(scone.output, combined, input.markers, tsne = FALSE)
make.hist(final, 100, "IL7.fraction.cond.2", "fraction IL7")
devtools::document()
BiocCheck(getwd())
devtools::document()
BiocCheck(getwd())
system.file("extdata", "markers.csv", package = "Sconify")
#' file <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
#'     package = "Sconify")
#' fcs.to.tibble(file)
file <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
package = "Sconify")
fcs.to.tibble(file)
devtools::document()
BiocCheck(getwd())
devtools::document()
BiocCheck(getwd())
#' file <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
#'     package = "Sconify")
#' fcs.to.tibble(file)
post.processing(scone.output, combined, input.markers, tsne = FALSE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(roxygen2)
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenize()
devtools::document()
devtools::document()
file1 <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
package = "Sconify") file2 <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_IL7.fcs",
#'     package = "Sconify")
#' process.multiple.files(c(file1, file2), input.markers)
file1 <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
package = "Sconify") file2 <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_IL7.fcs",
#'     package = "Sconify")
#' process.multiple.files(c(file1, file2), input.markers)
file1 <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
package = "Sconify")
file2 <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_IL7.fcs",
package = "Sconify")
process.multiple.files(c(file1, file2), input.markers)
process.multiple.files(c(file1, file2), input = input.markers)
devtools::document()
file <- system.file("extdata", "Bendall_et_al_Cell_Sample_C_basal.fcs",
package = "Sconify")
splitFile(file, input.markers = input.markers)
devtools::document()
meaning.of.life()
