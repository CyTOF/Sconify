geom_histogram(aes(y = ..count..), binwidth = 1/k) +
xlim(c(0, 1)) +
theme(text = element_text(size = 20)) +
xlab("fraction stimulated")
}
coin.toss <- k.flip(100, 10000)
make.hist(as.tibble(coin.toss), 100)
median(coin.toss)
sd(coin.toss)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "IL7 -> pSTAT5 -log10(qvalue)") +
scale_color_gradientn(colors = c("black", "yellow"))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), values = c(0, 1))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.3, 0.7))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.2, 0.8))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
# Wanderlust values (higher means more somatic)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$wanderlust,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Wanderlust (somatic-ness) value") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
# Fraction of cells belonging to the IL-y condition.
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
# Wanderlust values (higher means more somatic)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$wanderlust,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Wanderlust (somatic-ness) value") +
scale_color_gradientn(colors = c("black", "yellow"))
# Fraction of cells belonging to the IL-y condition.
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
final$`CD19(Nd142)Di`
# Wanderlust values (higher means more somatic)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$`CD19(Nd142)Di`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "CD19") +
scale_color_gradientn(colors = c("black", "yellow"))
# Fraction of cells belonging to the IL-y condition.
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
# Wanderlust values (higher means more somatic)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$`CD20(Sm147)Di`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "CD19") +
scale_color_gradientn(colors = c("black", "yellow"))
# Fraction of cells belonging to the IL-y condition.
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
# Wanderlust values (higher means more somatic)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$`IgM(Eu153)Di`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "IgM") +
scale_color_gradientn(colors = c("black", "yellow"))
# Fraction of cells belonging to the IL-y condition.
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$IL7.fraction.cond.2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction cells in IL7 condition") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0.25, 0.75))
document()
devtools::document()
library(Sconify)
document()
devtools::document()
test <- 1:10
test
as.tibble(test)
as.tibble("test" = test)
as.tibble(test = test)
tibble(test)
tibble(test = test)
make.hist
# Compare to a coin toss distribution
# Flips a coin k number of times, n repetitions, and returns the vector containing the per-k percent heads
k.flip <- function(k, n) {
# The result
result <- sapply(1:n, function(i) {
# Get the fraction heads for n flips
flips <- sample(c(0, 1), k, replace = TRUE)
percent.heads <- sum(flips)/length(flips)
return(percent.heads)
})
}
coin.toss <- tibble("binomial" = k.flip(100, 10000))
make.hist(coin.toss, 100, "binomial", "fraction heads")
library(Sconify)
library(tidyverse)
# Visualization
make.hist(final, 100)
# Characteristics of the visualization
median(final$IL7.fraction.cond.2)
sd(final$IL7.fraction.cond.2)
document
devtools::document()
library(Sconify)
library(Sconify)
final$IL7.fraction.cond.2[1:10]
knitr::opts_chunk$set(fig.width=6, fig.height=4)
library(tidyverse)
# Visualization
make.hist(final, 100, "IL7.fraction.cond.2", "fraction IL7")
make.hist
?make.hist
rm(make.hist)
library(tidyverse)
# Visualization
make.hist(final, 100, "IL7.fraction.cond.2", "fraction IL7")
# Characteristics of the visualization
median(final$IL7.fraction.cond.2)
sd(final$IL7.fraction.cond.2)
# Compare to a coin toss distribution
# Flips a coin k number of times, n repetitions, and returns the vector containing the per-k percent heads
k.flip <- function(k, n) {
# The result
result <- sapply(1:n, function(i) {
# Get the fraction heads for n flips
flips <- sample(c(0, 1), k, replace = TRUE)
percent.heads <- sum(flips)/length(flips)
return(percent.heads)
})
}
coin.toss <- tibble("binomial" = k.flip(100, 10000))
make.hist(coin.toss, 100, "binomial", "fraction heads")
median(coin.toss)
# Compare to a coin toss distribution
# Flips a coin k number of times, n repetitions, and returns the vector containing the per-k percent heads
k.flip <- function(k, n) {
# The result
result <- sapply(1:n, function(i) {
# Get the fraction heads for n flips
flips <- sample(c(0, 1), k, replace = TRUE)
percent.heads <- sum(flips)/length(flips)
return(percent.heads)
})
}
coin.toss <- tibble("binomial" = k.flip(100, 10000))
make.hist(coin.toss, 100, "binomial", "fraction heads")
median(coin.toss$binomial)
sd(coin.toss$binomial)
dir()
files <- list.files()
files
setwd("~/Documents/local.R.projects/Sconify.extra")
files <- list.files()
files
multiplex.final.norm.false.scale.false <- read.csv(grep("norm.false.scale.false", files))
multiplex.final.norm.false.scale.false <- read.csv(files[grep("norm.false.scale.false", files)])
multiplex.final.norm.false.scale.false
multiplex.final.norm.false.scale.false <- read_csv(files[grep("norm.false.scale.false", files)])
multiplex.final.norm.false.scale.false
multiplex.final.norm.true.scale.true <- read.csv(files[grep("norm.true.scale.true", files)])
bz.gmcsf.final <- read_csv(files[grep("norm.false.scale.false", files)])
bz.gmcsf.final$X1 <- NULL
bz.gmcsf.final.norm.scale <- read_csv(files[grep("norm.true.scale.true", files)])
bz.gmcsf.final.norm.scale$X1 <- NULL
bz.gmcsf.final
bz.gmcsf.final.norm.scale
setwd("~/Documents/local.R.projects/Sconify")
devtools::use_data(bz.gmcsf.final)
devtools::use_data(bz.gmcsf.final.norm.scale)
document()
devtools::document()
library(Sconify)
browseVignettes(Sconify)
browseVignettes("Sconify")
library(Sconify)
bz.gmcsf.final
# Before normalization
make.hist(bz.gmcsf.final, 100, "fraction.cond.2", "fraction GM-CSF")
library(tidyverse)
# Visualization
make.hist(final, 100, "IL7.fraction.cond.2", "fraction IL7")
# Characteristics of the visualization
median(final$IL7.fraction.cond.2)
sd(final$IL7.fraction.cond.2)
make.hist
# Before normalization
make.hist(bz.gmcsf.final, 100, "fraction.cond2", "fraction GM-CSF")
# Characteristics of the visualization
median(bz.gmcsf.final$fraction.cond.2)
sd(bz.gmcsf.final$fraction.cond.2)
# After normalization
make.hist(bz.gmcsf.final.norm.scale, 100, "fraction.cond2", "fraction GM-CSF")
# Characteristics of the visualization
median(bz.gmcsf.final.norm.scale$fraction.cond2)
sd(bz.gmcsf.final.norm.scale$fraction.cond2)
# Before normalization
make.hist(bz.gmcsf.final, 100, "fraction.cond2", "fraction GM-CSF")
# Characteristics of the visualization
median(bz.gmcsf.final$fraction.cond2)
sd(bz.gmcsf.final$fraction.cond2)
# After normalization
make.hist(bz.gmcsf.final.norm.scale, 100, "fraction.cond2", "fraction GM-CSF")
# Characteristics of the visualization
median(bz.gmcsf.final.norm.scale$fraction.cond2)
sd(bz.gmcsf.final.norm.scale$fraction.cond2)
input
bz.gmcsf.final
colnames(bz.gmcsf.final)
colnames(bz.gmcsf.final) %>% .[grep("CD", .)]
surface <- colnames(bz.gmcsf.final) %>% .[grep("CD", .)]
surface <- c(surface, "HLA-DR", "IgM")
surface
bz.gmcsf.final$cond <- "raw"
bz.gmcsf.final.norm.scale$cond <- "norm"
bz.com <- bind_rows(bz.gmcsf.final, bz.gmcsf.final.norm.scale)
bz.surface <- bz.com[,surface]
bz.surface
library(Rtsne)
tsne <- Rtsne(as.matrix(bz.surface), verbose = TRUE)
tsne.markers <- tsne$Y
bz.com$bh-SNE1 <- tsne.markers[,1]
tsne.markers
tsne.markers[,1]
bz.com
bz.com$bh-SNE1 <- tsne.markers[,1]
bz.com$bhSNE1 <- tsne.markers[,1]
bz.com$bhSNE2 <- tsne.markers[,2]
bz.com
bz.gmcsf.final <- bz.com[bz.com$cond == "raw",]
bz.gmcsf.final.norm.scale <- bz.com[bz.com$cond == "norm",]
bz.gmcsf.fimal
bz.gmcsf.final
bz.gmcsf.final.norm.scale
bz.gmcsf.final <- bz.com[bz.com$cond == "raw",]
bz.gmcsf.final$cond <- NULL
bz.gmcsf.final.norm.scale <- bz.com[bz.com$cond == "norm",]
bz.gmcsf.final.norm.scale$cond <- NULL
bz.gmcsf.final.norm.scale
bz.com$bh-SNE1 <- tsne.markers[,1]
bz.com$bh-SNE2 <- tsne.markers[,2]
bz.com$`bh-SNE1` <- tsne.markers[,1]
bz.com$`bh-SNE2` <- tsne.markers[,2]
bz.com$bhSNE1 <- NULL
bz.com$bhSNE2 <- NULL
bz.gmcsf.final <- bz.com[bz.com$cond == "raw",]
bz.gmcsf.final$cond <- NULL
bz.gmcsf.final.norm.scale <- bz.com[bz.com$cond == "norm",]
bz.gmcsf.final.norm.scale$cond <- NULL
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"))
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
library(tidyverse)
library(Rtsne)
files <- list.files()
setwd("~/Documents/local.R.projects/Sconify.extra")
files <- list.files()
bz.gmcsf.final <- read_csv(files[grep("norm.false.scale.false", files)])
bz.gmcsf.final$X1 <- NULL
bz.gmcsf.final.norm.scale <- read_csv(files[grep("norm.true.scale.true", files)])
bz.gmcsf.final.norm.scale$X1 <- NULL
bz.gmcsf.final
bz.gmcsf.final.norm.scale
surface <- colnames(bz.gmcsf.final) %>% .[grep("CD", .)]
surface <- c(surface, "HLA-DR", "IgM")
raw.tsne <- Rtsne(as.matrix(bz.gmcsf.final[,surface]), verbose = TRUE)
bz.gmcsf.final$`bh-SNE1` <- raw.tsne$Y[,1]
bz.gmcsf.final$`bh-SNE2` <- raw.tsne$Y[,2]
norm.tsne <- Rtsne(as.matrix(bz.gmcsf.final.norm.scale[,surface]), verbose = TRUE)
bz.gmcsf.final.norm.scale$`bh-SNE1` <- norm.tsne$Y[,1]
bz.gmcsf.final.norm.scale$`bh-SNE2` <- norm.tsne$Y[,2]
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
devtools::use_data(bz.gmcsf.final)
devtools::use_data(bz.gmcsf.final.norm.scale)
setwd("~/Documents/local.R.projects/Sconify")
devtools::use_data(bz.gmcsf.final)
devtools::use_data(bz.gmcsf.final.norm.scale)
devtools::use_data(bz.gmcsf.final, overwrite = TRUE)
devtools::use_data(bz.gmcsf.final.norm.scale, overwrite = TRUE)
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
bz.gmcsf.final$fraction.cond2
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
library(Sconify)
devtools::document()
library(Sconify)
markers
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
browseVignettes(package = "Cydar")
browseVignettes(package = "cydar")
document()
devtools::document()
library(Sconify)
