color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
devtools::use_data(bz.gmcsf.final)
devtools::use_data(bz.gmcsf.final.norm.scale)
setwd("~/Documents/local.R.projects/Sconify")
devtools::use_data(bz.gmcsf.final)
devtools::use_data(bz.gmcsf.final.norm.scale)
devtools::use_data(bz.gmcsf.final, overwrite = TRUE)
devtools::use_data(bz.gmcsf.final.norm.scale, overwrite = TRUE)
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$fraction.cond2,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
bz.gmcsf.final$fraction.cond2
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
library(Sconify)
devtools::document()
library(Sconify)
markers
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final$`bh-SNE1`,
bz.gmcsf.final$`bh-SNE2`,
color = bz.gmcsf.final$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
# t-SNE map colored by KNN-based fraction GM-CSF
qplot(bz.gmcsf.final.norm.scale$`bh-SNE1`,
bz.gmcsf.final.norm.scale$`bh-SNE2`,
color = bz.gmcsf.final.norm.scale$`fraction.cond2`,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "Fraction GM-CSF") +
scale_color_gradientn(colors = c("black", "yellow"), limits = c(0, 1))
browseVignettes(package = "Cydar")
browseVignettes(package = "cydar")
document()
devtools::document()
library(Sconify)
?warning
warning("TODO eat")
document()
setwd("~/Documents/local.R.projects/Sconify")
devtools::document()
cells
il7.data
basal
unique(il7.data$condition)
combined
unique(combined$condition)
input.markers
funct.markers
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, case = input, k = 100)
nn.index <- nn[[1]][,2:ncol(nn.index[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn.dist[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(nn)
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
library(FNN)
library(rflann)
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, case = input, k = 100)
nn.index <- nn[[1]][,2:ncol(nn.index[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn.dist[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(nn)
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
?Neighbor
?Neighbour
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = 100)
nn.index <- nn[[1]][,2:ncol(nn.index[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn.dist[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(nn)
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
test <- Neighbour(query = input, ref = input, k = 100)
test <- Neighbour(query = input, ref = input, k = 100)
input <- combined[,input.markers]
test <- Neighbour(query = input, ref = input, k = 100)
test
test[[1]]
test[[2]]
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = 100)
nn.index <- nn[[1]][,2:ncol([[1]])]
nn.dist <- nn[[2]][,2:ncol([[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(nn)
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = 100)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(nn)
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
nn.read
nn.real[[1]]
all.equal(nn.real[[1]], nn.approx[[1]])
nn.real
str(nn.real)
str(nn.approx)
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = 100)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(input, k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
all.equal(nn.real[[1]], nn.approx[[1]])
str(nn.real)
str(nn.approx)
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = k + 1)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(data = input, k = k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
print("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.real <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = FALSE)
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
all.equal(nn.real[[1]], nn.approx[[1]])
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "boobs")
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = k + 1)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(data = input, k = k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
stop("Please enter boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "boobs")
fnn <- function(cell.df, input.markers, k = 100, approx = FALSE) {
print("finding k-nearest neighbors")
input <- cell.df[,input.markers]
if(approx == TRUE) {
nn <- Neighbour(query = input, ref = input, k = k + 1)
nn.index <- nn[[1]][,2:ncol(nn[[1]])]
nn.dist <- nn[[2]][,2:ncol(nn[[2]])]
} else if (approx == FALSE) {
nn <- get.knn(data = input, k = k, algorithm = "kd_tree")
nn.index <- nn[[1]]
nn.dist <- nn[[2]]
} else {
stop("Please enter a boolean value for 'approx' argument")
}
print("k-nearest neighbors complete")
return(list(nn.index = nn.index, nn.dist = nn.dist))
}
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "TRUE")
nn.approx <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = "true")
nn.real$nn.index
nn.real$nn.dist
avg.dist <- apply(nn.real, 1, mean)
nn.real
avg.dist <- apply(nn.real$nn.dist, 1, mean)
avg.dist
hist(avg.dist)
hist(avg.dist, braeks = 100)
hist(avg.dist, breaks = 100)
hist(avg.dist, breaks = 100)
hist(avg.dist, breaks = 200)
hist(avg.dist, breaks = 50)
avg.dist <- apply(nn.real$nn.dist, 1, sd)
hist(avg.dist, breaks = 200)
avg.dist <- apply(nn.real$nn.dist, 1, mean)
devtools::document()
library(Sconify)
rm(fnn)
library(Sconify)
fnn
nn <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
scone <- scone.values(nn.matrix = nn, cell.data = combined, scone.markers = scone.markers, unstim = "basal")
scone
scone <- scone.values(nn.matrix = nn, cell.data = combined, scone.markers = funct.markers, unstim = "basal")
final <- post.processing(scone.output = scone, input = input.markers, cell.data = combined, tsne = TRUE, log.transform.qvalue = TRUE)
final
final$density
hist(final$density)
hist(final$density, breaks = 100)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
library(ggplot2)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
plot(final$wanderlust, final$density)
# New scone testing with wanderlust data
library(ggplot2)
nn <- fnn(cell.df = combined, input.markers = input.markers, k = 100, approx = TRUE)
scone <- scone.values(nn.matrix = nn, cell.data = combined, scone.markers = funct.markers, unstim = "basal")
final <- post.processing(scone.output = scone, input = input.markers, cell.data = combined, tsne = TRUE, log.transform.qvalue = TRUE)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
plot(final$wanderlust, final$density)
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
basal <- system.file('extdata',
'Bendall et al Cell Sample C_basal.fcs',
package = "Sconify")
basal <- fcs.to.tibble(basal, transform = "asinh")
data.to.fcs(basal, "basal.output.FCS", untransform = TRUE)
qplot(final$`bh-SNE1`,
final$`bh-SNE2`,
color = final$density,
xlab = "bh-SNE1",
ylab = "bh-SNE2") +
labs(color = "density") +
scale_color_gradientn(colors = c("black", "yellow"))
plot(final$wanderlust, final$density)
scone.output
scone
exist
devtools::use_data(nn, overwrite = TRUE)
devtools::use_data(final, overwrite = TRUE)
scone.output <- scone
devtools::use_data(scone, overwrite = TRUE)
nn$nn.dist
nn[[1]]
nn[[1]][1:20, 1:10]
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
# Cell identity is in rows, k-nearest neighbors are columns
# List of 2 includes the cell identity of each nn, and the euclidean distance between
#   itself and the cell of interest
# Indices
str(nn[[1]])
nn[[1]][1:20, 1:10]
# Distance
str(nn[[2]])
nn[[2]][1:20, 1:10]
nn
str(nn)
devtools::document()
library(Sconify)
scone.output
knitr::opts_chunk$set(echo = TRUE, results = "markup", message = FALSE, warning = FALSE)
scone.output
scone.output[,34]
scone.outpu
scone.output
library(Sconify)
scone.output
scone.output
final
scone
scone.output <- scone
devtools::use_data(scone.output, overwrite = TRUE)
devtools::document()
library(Sconify)
scone.output
scone.output
devtools::use_data(scone.output, overwrite = TRUE)
library(Sconify)
library(tidyverse)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/scone/gabi.surgery.stims/fcs")
files <- list.files() %>% .[grep("fcs", .)]
basal <- files[grep("BL", files)]
lps <- files[grep("LPS", files)]
il6 <- files[grep("IL6", files)]
total.files <- c(basal, lps, il6)
markers <- read_csv("organized.markers.csv")
md.input <- markers$input
md.scone <- markers$scone %>% .[!is.na(.)]
set.seed(10218)
md <- process.multiple.files(total.files,
numcells = 20000,
scale = TRUE,
input = md.input,
name.multiple.donors = TRUE)
md.nn <- fnn(cell.df = md, input.markers = md.input, k = 200)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
md.final <- post.processing(scone.output = md.scone.output,
cell.data = md,
input = md.input,
tsne = TRUE,
log.transform.qvalue = TRUE)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
document()
devtools::document()
setwd("~/Documents/local.R.projects/Sconify")
devtools::document()
library(Sconify)
md.nn <- fnn(cell.df = md, input.markers = md.input, k = 200)
md.scone.output <- scone.values(nn.matrix = md.nn,
cell.data = md,
scone.markers = md.scone,
unstim = "BL",
multiple.donor.compare = TRUE)
md.final <- post.processing(scone.output = md.scone.output,
cell.data = md,
input = md.input,
tsne = TRUE,
log.transform.qvalue = TRUE)
devtools::use_data(md.nn, overwrite = TRUE)
devtools::use_data(md.scone.output, overwrite = TRUE)
devtools::use_data(md.final, overwrite = TRUE)
md.scone.output
devtools::document()
library(Sconify)
test <- impute.testing(k.titration, combined, input.markers, funct.markers, approx = TRUE)
devtools::document()
library(Sconify)
test <- impute.testing(k.titration, combined, input.markers, funct.markers, approx = TRUE)
test
devtools::document()
library(Sconify)
devtools::document()
library(Sconify)
library(Scono)
library(Sconify)
final
final$density
qplot(final$density, final$`TdT(Dy163)Di`)
qplot(final$density, final$`TdT(Dy163)Di`)
library(ggplot2)
qplot(final$density, final$`TdT(Dy163)Di`)
